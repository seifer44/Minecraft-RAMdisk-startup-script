#!/bin/bash
# /etc/init.d/minecraft
#
# https://github.com/seifer44/Minecraft-RAMdisk-startup-script/
# Version 1.0
#
##############################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################
#
### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

#Settings
SERVICE='minecraft_server.jar'
OPTIONS='nogui'
USERNAME='minecraft'
MCPATH='/home/minecraft/ramdisk/'
ORIGPATH='/home/minecraft/minecraft/service/'
BACKUPPATH='/home/minecraft/backups/recent'
MAXHEAP=4096
MINHEAP=256
HISTORY=200
CPU_COUNT=4
INVOCATION="java -Xmx${MAXHEAP}M -Xms${MINHEAP}M -XX:+UseConcMarkSweepGC \
-XX:+CMSIncrementalPacing -XX:ParallelGCThreads=$CPU_COUNT -XX:+AggressiveOpts \
-jar $SERVICE $OPTIONS"

#########################################
### CORE FUNCTIONALITY - DO NOT EDIT  ###
#########################################

green='\e[0;32m'
red='\e[0;31m'
yellow='\e[0;33m'
NC='\e[0m' # No Color

ME=`whoami`
as_user() {
  if [ $ME == $USERNAME ] ; then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
}

mc_start() {
  if  pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo "$SERVICE is already running!"
  else
    echo -n "Starting Minecraft Server:                               "

        #Copy from original path to RAMdisk.

        cd $ORIGPATH
        as_user "cp -R * $MCPATH"
    cd $MCPATH
    as_user "cd $MCPATH && screen -h $HISTORY -dmS minecraft $INVOCATION"
    sleep 7
    if pgrep -u $USERNAME -f $SERVICE > /dev/null
    then
      echo -e "[  ${green}OK${NC}  ]"
    else
      echo -e "[$(red)FAILED$(NC)]"
    fi
  fi
}

mc_saveoff() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo "$SERVICE is running... suspending saves"
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-off\"\015'"
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-all\"\015'"
    sync
    sleep 10
  else
    echo "$SERVICE is not running. Not suspending saves."
  fi
}

mc_saveon() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo "$SERVICE is running... re-enabling saves"
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-on\"\015'"
  else
    echo "$SERVICE is not running. Not resuming saves."
  fi
}

mc_ramsave() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo -n "Backing up ramdrive to harddrive:                        "
        ### NOTE: This rsync command is also in SaveCheck ###
    as_user "rsync -a --delete $MCPATH $ORIGPATH" > /var/log/minecraft/rsync.log

    if [ $? == 0 ]
        then
                echo -e "[  ${green}OK${NC}  ]"
        else
                echo -e "[$(red)FAILED$(NC)]"
                echo -n "Backup failed. Review rsync.log"
        fi
  else
        echo -e "[$(yellow)FAILED$(NC)]"
        echo "$SERVICE is not running. Not saving RAMDisk."
  fi
}

mc_savecheck() {
        logtail=$(tail -n 4 /home/minecraft/ramdisk/logs/latest.log)
        line1="] [Server thread/INFO]: Turned off world auto-saving
"
        line2="] [Server thread/INFO]: Saving...
"
        line3="] [Server thread/INFO]: Saved the world
"
        line4="] [Server thread/INFO]: Turned on world auto-saving"
        usersonline=$(cat /srv/samba/raid/web/mconline/online.js)
        zerousers='var usersonline = "";'

        if [[ ("$usersonline" = "$zerousers") && ("$logtail" = "["*"$line1""["*"$line2""["*"$line3""["*"$line4") ]];
        then
                echo "Server inactive. Not saving to keep down log spam. Running rsync anyway."
				as_user "rsync -a --delete $MCPATH $ORIGPATH" > /var/log/minecraft/rsync.log
        else
                mc_saveoff
                mc_ramsave
                mc_saveon
        fi
}

mc_stop() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo -n "Stopping Minecraft Server:                               "
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map...\"\015'"
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"save-all\"\015'"
    sleep 10
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"stop\"\015'"
    sleep 7
  else
    echo "$SERVICE was not running."
  fi
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo -e "[$(red)FAILED$(NC)]"
  else
    echo -e "[  ${green}OK${NC}  ]"
  fi

  echo -n "Moving off of the RAMDisk...                             "
  cd $MCPATH
  as_user "rsync -a --delete * $ORIGPATH"
  if [ "$?" == 0 ]
  then
    echo -e "[  ${green}OK${NC}  ]"
        echo "Server is offline."
  else
    echo -e "[$(red)FAILED$(NC)]"
  fi
}

mc_update() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    echo "$SERVICE is running! Will not start update."
  else
    MC_SERVER_URL=http://s3.amazonaws.com/MinecraftDownload/launcher/minecraft_server.jar?v=`date | sed "s/[^a-zA-Z0-9]/_/g"`
    as_user "cd $MCPATH && wget -q -O $MCPATH/minecraft_server.jar.update $MC_SERVER_URL"
    if [ -f $MCPATH/minecraft_server.jar.update ]
    then
      if `diff $MCPATH/$SERVICE $MCPATH/minecraft_server.jar.update >/dev/null`
      then
      if `diff $MCPATH/$SERVICE $MCPATH/minecraft_server.jar.update >/dev/null`
      then
        echo "You are already running the latest version of $SERVICE."
      else
        as_user "mv $MCPATH/minecraft_server.jar.update $MCPATH/$SERVICE"
        echo "Minecraft successfully updated."
      fi
    else
      echo "Minecraft update could not be downloaded."
    fi
  fi
}

mc_backup() {
   NOW=`date "+%Y-%m-%d_%H%M"`
   BACKUP_FILE="$BACKUPPATH/backup_$NOW.tar.gz"
   echo -n "Backing up minecraft world, including compression"
   as_user "echo '*************************************'" >> /var/log/minecraft/tar.log 2>&1
   as_user "echo -e 'Backup began at $NOW \n'" >> /var/log/minecraft/tar.log 2>&1
   as_user "tar -C $ORIGPATH -zcf $BACKUP_FILE . --checkpoint=.1000"
       if [ $? == 0 ]
        then
                echo -e "[  ${green}OK${NC}  ]"
        else
                echo -e "[$(red)FAILED$(NC)]"
                echo -n "Backup failed. Review tar.log"
        fi
   as_user "echo -en '\nBackup finished at ' && date +'%Y-%m-%d %H%M'" >> /var/log/minecraft/tar.log 2>&1
   as_user "du -h $BACKUP_FILE" >> /var/log/minecraft/tar.log 2>&1
}
mc_command() {
  command="$1";
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    pre_log_len=`wc -l "$MCPATH/server.log" | awk '{print $1}'`
    echo "$SERVICE is running... executing command"
    as_user "screen -p 0 -S minecraft -X eval 'stuff \"$command\"\015'"
    sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
    # print output
    tail -n $[`wc -l "$MCPATH/server.log" | awk '{print $1}'`-$pre_log_len] "$MCPATH/server.log"
  fi
}

#Start-Stop here
case "$1" in
  start)
    mc_start
    ;;
  stop)
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  update)
    mc_stop
    mc_backup
    mc_update
    mc_start
    ;;
  backup)
    if pgrep -u $USERNAME -f $SERVICE > /dev/null
    then
        mc_saveoff
        mc_ramsave
        mc_backup
        mc_saveon
    else
        echo "$SERVICE is not running. Proceeding with backup from disk location $ORIGPATH."
        mc_backup
    fi
    ;;
  ramsave)
    mc_savecheck
    ;;
  status)
    if pgrep -u $USERNAME -f $SERVICE > /dev/null
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  command)
    if [ $# -gt 1 ]; then
      shift
      mc_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;

  *)
  echo "Usage: $0 {start|stop|update|backup|status|restart|command \"server command\"}"
  exit 1
  ;;
esac

exit 0
